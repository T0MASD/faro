---
name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Deploy kinc cluster for Kubernetes testing
      - name: Deploy kinc cluster
        run: |
          # Enable IP forwarding (required for kinc networking)
          echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
          
          # Start kinc cluster (systemd-based Kubernetes container)
          # Based on kinc/runtime/quadlet/kinc-control-plane.container
          podman run -d \
            --name kinc-cluster \
            --hostname kinc-control-plane \
            --cap-add=SYS_ADMIN --cap-add=SYS_RESOURCE --cap-add=NET_ADMIN \
            --cap-add=SETPCAP --cap-add=NET_RAW --cap-add=SYS_PTRACE \
            --cap-add=DAC_OVERRIDE --cap-add=CHOWN --cap-add=FOWNER \
            --cap-add=FSETID --cap-add=KILL --cap-add=SETGID --cap-add=SETUID \
            --cap-add=NET_BIND_SERVICE --cap-add=SYS_CHROOT --cap-add=SETFCAP \
            --cap-add=DAC_READ_SEARCH --cap-add=AUDIT_WRITE \
            --device /dev/fuse \
            --sysctl net.ipv6.conf.all.disable_ipv6=0 \
            --sysctl net.ipv6.conf.all.keep_addr_on_down=1 \
            --tmpfs /tmp:rw,rprivate,nosuid,nodev,tmpcopyup \
            --tmpfs /run:rw,rprivate,nosuid,nodev,tmpcopyup \
            --tmpfs /run/lock:rw,rprivate,nosuid,nodev,tmpcopyup \
            --publish 127.0.0.1:6443:6443/tcp \
            -e container=podman \
            -e KUBECONFIG=/etc/kubernetes/admin.conf \
            ghcr.io/t0masd/kinc:v0-1
          
          echo "⏳ Waiting for kinc initialization (300s timeout, 14 validation steps)..."
          echo "   This includes: systemd, cgroup setup, CRI-O, kubelet, kubeadm init,"
          echo "   API server, CNI, storage provisioner, and CoreDNS"
          
          # Wait for container to respond
          timeout 30 bash -c 'until podman exec kinc-cluster echo ok >/dev/null 2>&1; do sleep 2; done'
          echo "✅ Container responding"
          
          # Wait for systemd inside container
          timeout 60 bash -c 'until podman exec kinc-cluster systemctl is-system-running --wait >/dev/null 2>&1; do sleep 2; done'
          echo "✅ Systemd operational"
          
          # Wait for CRI-O
          timeout 60 bash -c 'until podman exec kinc-cluster systemctl is-active crio.service >/dev/null 2>&1; do sleep 2; done'
          echo "✅ CRI-O active"
          
          # Wait for cluster initialization (kinc-init.service runs kubeadm init)
          # This can take 3-5 minutes, so use longer timeout
          echo "⏳ Waiting for kinc-init.service (this runs kubeadm init, takes 3-5 min)..."
          timeout 600 bash -c 'until podman exec kinc-cluster systemctl is-active kinc-init.service >/dev/null 2>&1; do sleep 10; done'
          echo "✅ Cluster initialization started"
          
          # Debug: Check if init completed successfully
          podman exec kinc-cluster systemctl status kinc-init.service --no-pager || true
          
          # Wait for API server (from host)
          timeout 120 bash -c 'until curl -k -s https://127.0.0.1:6443/healthz >/dev/null 2>&1; do sleep 2; done'
          echo "✅ API server responding"
          
          # Wait for node ready
          timeout 120 bash -c 'until podman exec kinc-cluster kubectl --kubeconfig=/etc/kubernetes/admin.conf wait --for=condition=Ready nodes --all --timeout=10s >/dev/null 2>&1; do sleep 5; done'
          echo "✅ Node ready"
          
          # Wait for CoreDNS (critical for Faro tests)
          timeout 120 bash -c 'until podman exec kinc-cluster kubectl --kubeconfig=/etc/kubernetes/admin.conf get pod -n kube-system -l k8s-app=kube-dns --field-selector=status.phase=Running >/dev/null 2>&1; do sleep 5; done'
          echo "✅ CoreDNS running"
          
          # Extract kubeconfig
          mkdir -p ~/.kube
          podman cp kinc-cluster:/etc/kubernetes/admin.conf ~/.kube/config
          sed -i 's|server: https://.*:6443|server: https://127.0.0.1:6443|g' ~/.kube/config
          
          # Verify cluster
          echo ""
          echo "📊 Cluster Status:"
          kubectl get nodes -o wide
          kubectl get pods -A
          kubectl cluster-info

      # Run comprehensive test suite
      - name: Run full test suite
        run: |
          go mod tidy
          make test

      # Collect and upload test logs and events
      - name: Upload test logs and events
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_number }}
          path: |
            work/
            tests/**/*.log
            tests/**/*.json
            **/*.log
            **/*.json
          retention-days: 30
        continue-on-error: true

      # Validate library can be imported
      - name: Validate library import
        run: |
          cat > test_import.go << 'EOF'
          package main
          import _ "github.com/T0MASD/faro/pkg"
          func main() {}
          EOF
          go mod tidy
          go build test_import.go
          rm test_import.go

      # Cleanup kinc cluster
      - name: Cleanup kinc cluster
        if: always()
        run: podman rm -f kinc-cluster || true
