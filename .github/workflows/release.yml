---
name: Library Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      # Install KinD for Kubernetes testing
      - name: Install KinD
        run: |
          go install sigs.k8s.io/kind@v0.22.0
          kind version

      # Create KinD cluster for E2E and integration tests
      - name: Create KinD cluster
        run: |
          kind create cluster
          kubectl cluster-info
          kubectl get nodes

      # Run comprehensive test suite (unit + e2e + integration)
      - name: Run full test suite
        run: |
          go mod tidy
          # Create logs directory for release testing
          mkdir -p release-test-logs
          make test 2>&1 | tee release-test-logs/release-test-output.log

      - name: Validate library can be imported
        run: |
          cat > test_import.go << 'EOF'
          package main
          import _ "github.com/T0MASD/faro/pkg"
          func main() {}
          EOF
          go mod tidy
          go build test_import.go
          rm test_import.go

      # Collect and upload release test logs
      - name: Collect release test artifacts
        if: always()
        run: |
          # Copy any generated log files and events from release tests
          find tests -name "*.log" -type f -exec cp {} release-test-logs/ \; 2>/dev/null || true
          find tests -name "*.json" -type f -exec cp {} release-test-logs/ \; 2>/dev/null || true
          find tests -name "logs" -type d -exec cp -r {} release-test-logs/ \; 2>/dev/null || true
          find work -name "*.log" -type f -exec cp {} release-test-logs/ \; 2>/dev/null || true
          find work -name "*.json" -type f -exec cp {} release-test-logs/ \; 2>/dev/null || true
          find work -name "logs*" -type d -exec cp -r {} release-test-logs/ \; 2>/dev/null || true
          
          # Create release test summary
          echo "=== Release Test Summary ===" > release-test-logs/release-summary.txt
          echo "Release Tag: ${{ github.ref_name }}" >> release-test-logs/release-summary.txt
          echo "Generated at: $(date)" >> release-test-logs/release-summary.txt
          echo "Commit: ${{ github.sha }}" >> release-test-logs/release-summary.txt
          echo "" >> release-test-logs/release-summary.txt
          echo "Files collected:" >> release-test-logs/release-summary.txt
          echo "Log files:" >> release-test-logs/release-summary.txt
          find release-test-logs -name "*.log" | sort >> release-test-logs/release-summary.txt
          echo "Event files:" >> release-test-logs/release-summary.txt
          find release-test-logs -name "*.json" | sort >> release-test-logs/release-summary.txt

      # Upload release test logs
      - name: Upload release test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-test-logs-${{ github.ref_name }}
          path: release-test-logs/
          retention-days: 90

      - name: Create library release
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
